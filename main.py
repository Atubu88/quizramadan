import os
import logging
import asyncio
import sentry_sdk
from aiogram import Bot, Dispatcher
from config import BOT_TOKEN
# –£–¥–∞–ª—è–µ–º: from database import close_db

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π Sentry
logging.basicConfig(
    level=logging.INFO,  # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –ª–æ–≥–∏, –≤–∫–ª—é—á–∞—è DEBUG
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]
)

logger = logging.getLogger(__name__)

SENTRY_DSN = os.getenv("SENTRY_DSN")
print(f"üîç SENTRY_DSN: {SENTRY_DSN}")

if SENTRY_DSN:
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        send_default_pii=True,
        traces_sample_rate=1.0,
        ignore_errors=[KeyboardInterrupt]
    )
    logging.info("‚úÖ Sentry —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á—ë–Ω!")
else:
    logging.warning("‚ö†Ô∏è SENTRY_DSN –Ω–µ –Ω–∞–π–¥–µ–Ω! –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Sentry –æ—Ç–∫–ª—é—á–µ–Ω–æ.")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

from handlers.start_handler import start_router
from handlers.quiz_handler import quiz_router
from handlers.leaderboard_handler import leaderboard_router
from handlers.admin import admin_router
from handlers.self_report_test_handler import test_router
from deepseek_handler import deepseek_router
from handlers.competition_router import competition_router
from handlers.survival import survival_router
from handlers.quiz_with_polls import quiz_with_polls_router

dp.include_router(start_router)
dp.include_router(quiz_router)
dp.include_router(leaderboard_router)
dp.include_router(admin_router)
dp.include_router(test_router)
dp.include_router(deepseek_router)
dp.include_router(competition_router)
dp.include_router(survival_router)
dp.include_router(quiz_with_polls_router)

async def on_startup():
    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    sentry_sdk.capture_message("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ Sentry!")

async def on_shutdown():
    logging.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    await bot.session.close()
    # –í—ã–∑–æ–≤ close_db() —É–¥–∞–ª—ë–Ω, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω

async def main():
    await on_startup()
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
        sentry_sdk.capture_exception(e)
    finally:
        await on_shutdown()

if __name__ == "__main__":
    asyncio.run(main())
