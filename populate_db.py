import logging
import asyncio
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from database import SessionLocal  # –ò—Å–ø–æ–ª—å–∑—É–µ–º SessionLocal (–ù–ï AsyncSessionLocal)
from models import Quiz, Question, Option

# üî• –î–∞–Ω–Ω—ã–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
QUIZ_DATA = {
    "title": "–ñ–∏–∑–Ω—å –ü—Ä–æ—Ä–æ–∫–∞ –ú—É—Ö–∞–º–º–∞–¥–∞",
    "questions": [
        {
            "question": "–ö–æ–≥–¥–∞ —Ä–æ–¥–∏–ª—Å—è –ü—Ä–æ—Ä–æ–∫ –ú—É—Ö–∞–º–º–∞–¥ (–º–∏—Ä –µ–º—É –∏ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ)?",
            "options": ["570 –≥–æ–¥", "580 –≥–æ–¥", "590 –≥–æ–¥", "600 –≥–æ–¥"],
            "correct": 0
        },
        {
            "question": "–ö–∞–∫ –∑–≤–∞–ª–∏ –º–∞—Ç—å –ü—Ä–æ—Ä–æ–∫–∞ –ú—É—Ö–∞–º–º–∞–¥–∞ (–º–∏—Ä –µ–º—É –∏ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ)?",
            "options": ["–ê–º–∏–Ω–∞ –±–∏–Ω—Ç –í–∞—Ö–±", "–•–∞–¥–∏–¥–∂–∞ –±–∏–Ω—Ç –•—É–≤–∞–π–ª–∏–¥", "–§–∞—Ç–∏–º–∞ –±–∏–Ω—Ç –ê—Å–∞–¥", "–ê—Å–∏—è –±–∏–Ω—Ç –ú—É–∑–∞—Ö–∏–º"],
            "correct": 0
        },
        {
            "question": "–ö–∞–∫–æ–π –∞–Ω–≥–µ–ª –ø–µ—Ä–µ–¥–∞–ª –ü—Ä–æ—Ä–æ–∫—É –ú—É—Ö–∞–º–º–∞–¥—É (–º–∏—Ä –µ–º—É –∏ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ) –ø–µ—Ä–≤—ã–µ –æ—Ç–∫—Ä–æ–≤–µ–Ω–∏—è –æ—Ç –ê–ª–ª–∞—Ö–∞?",
            "options": ["–ê–Ω–≥–µ–ª –î–∂–∏–±—Ä–∏–ª", "–ê–Ω–≥–µ–ª –ú–∏–∫–∞–∏–ª", "–ê–Ω–≥–µ–ª –ò—Å—Ä–∞—Ñ–∏–ª", "–ê–Ω–≥–µ–ª –ú–∞–ª–∏–∫"],
            "correct": 0
        },
        {
            "question": "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–ª–∞—Å—å –ø–µ—â–µ—Ä–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –ü—Ä–æ—Ä–æ–∫—É –ú—É—Ö–∞–º–º–∞–¥—É (–º–∏—Ä –µ–º—É –∏ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ) –±—ã–ª–∏ –¥–∞–Ω—ã –ø–µ—Ä–≤—ã–µ –æ—Ç–∫—Ä–æ–≤–µ–Ω–∏—è?",
            "options": ["–•–∏—Ä–∞", "–¢—É—Ä", "–°–∞—Ñ—Ä–∞", "–•—É–¥"],
            "correct": 0
        },
        {
            "question": "–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –±—ã–ª–æ –ü—Ä–æ—Ä–æ–∫—É –ú—É—Ö–∞–º–º–∞–¥—É (–º–∏—Ä –µ–º—É –∏ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ), –∫–æ–≥–¥–∞ –æ–Ω –ø–æ–ª—É—á–∏–ª –ø–µ—Ä–≤—ã–µ –æ—Ç–∫—Ä–æ–≤–µ–Ω–∏—è?",
            "options": ["40 –ª–µ—Ç", "30 –ª–µ—Ç", "25 –ª–µ—Ç", "50 –ª–µ—Ç"],
            "correct": 0
        }
    ]
}


async def add_quiz():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, –≤–æ–ø—Ä–æ—Å—ã –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –≤ Supabase —á–µ—Ä–µ–∑ SQLAlchemy."""
    async with SessionLocal() as session:  # üõ† –ò—Å–ø–æ–ª—å–∑—É–µ–º SessionLocal (–ù–ï AsyncSessionLocal)
        try:
            # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞
            result = await session.execute(
                select(Quiz).where(Quiz.title == QUIZ_DATA["title"])
            )
            existing_quiz = result.scalars().first()

            if existing_quiz:
                logging.info("‚ö†Ô∏è –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ.")
                return

            # üî• –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
            quiz = Quiz(title=QUIZ_DATA["title"])
            session.add(quiz)
            await session.commit()
            await session.refresh(quiz)

            # üî• –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            for q in QUIZ_DATA["questions"]:
                question = Question(text=q["question"], quiz_id=quiz.id)
                session.add(question)
                await session.commit()
                await session.refresh(question)

                for index, option_text in enumerate(q["options"]):
                    option = Option(
                        text=option_text,
                        is_correct=(index == q["correct"]),
                        question_id=question.id
                    )
                    session.add(option)

            # ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await session.commit()
            logging.info("‚úÖ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É!")

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {e}")
            await session.rollback()


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(add_quiz())
