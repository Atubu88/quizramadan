from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio
import os
from supabase import create_client
from typing import Optional

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ Supabase (—É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã)
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_API_KEY = os.getenv("SUPABASE_API_KEY")
supabase = create_client(SUPABASE_URL, SUPABASE_API_KEY)


def start_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω"), KeyboardButton(text="üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞")],
            [KeyboardButton(text="üåü –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥"), KeyboardButton(text="üìù –¢–µ—Å—Ç –°–∞–º–æ–æ—Ü–µ–Ω–∫–∏")],
            [KeyboardButton(text="üî• –†–∞–º–∞–¥–∞–Ω –ö–≤–µ—Å—Ç")],
            [KeyboardButton(text="üé≤ –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")]
        ],
        resize_keyboard=True
    )
    return keyboard


async def quiz_category_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω."""

    def fetch_categories():
        return supabase.table("categories").select("id, title").execute()

    response = await asyncio.to_thread(fetch_categories)
    categories = response.data or []

    keyboard_builder = InlineKeyboardBuilder()
    for category in categories:
        keyboard_builder.button(
            text=category["title"],
            callback_data=f"category_{category['id']}"
        )

    if categories:
        keyboard_builder.adjust(1)

    return keyboard_builder.as_markup()


async def quiz_list_keyboard(category_id: Optional[int] = None):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω. –ú–æ–∂–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –ø—Ä–∏–∑–Ω–∞–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω.
    """

    def fetch_quizzes():
        query = supabase.table("quizzes").select("id, title")
        if category_id is not None:
            query = query.eq("category_id", category_id)
        return query.execute()

    response = await asyncio.to_thread(fetch_quizzes)
    quizzes = response.data or []

    keyboard_builder = InlineKeyboardBuilder()
    for quiz in quizzes:
        keyboard_builder.button(
            text=quiz["title"],
            callback_data=f"quiz_{quiz['id']}"
        )

    if quizzes:
        keyboard_builder.adjust(1)

    if category_id is not None:
        keyboard_builder.row(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories")
        )

    return keyboard_builder.as_markup(), bool(quizzes)
