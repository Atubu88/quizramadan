# deepseek_handler.py

import os
import httpx
from aiogram import Router, types
from aiogram.filters import Command
from dotenv import load_dotenv
import logging
import asyncio

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logging.basicConfig(
    level=logging.DEBUG,  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è DEBUG –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è DeepSeek
deepseek_router = Router(name="deepseek_router")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ (–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_context = {}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
API_KEY = "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"
MODEL = "deepseek/deepseek-r1:free"
SITE_URL = os.getenv("SITE_URL")      # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: URL –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞
SITE_NAME = os.getenv("SITE_NAME")    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not API_KEY:
    logger.error("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω OPENROUTER_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    raise ValueError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω OPENROUTER_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ API OpenRouter.ai —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
async def fetch_completion_with_context(conversation: list):
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json",
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
    if SITE_URL:
        headers["HTTP-Referer"] = SITE_URL
    if SITE_NAME:
        headers["X-Title"] = SITE_NAME

    data = {
        "model": MODEL,
        "messages": conversation,
        "temperature": 0.7,
        "max_tokens": 1000,
        "top_p": 0.9,
        "frequency_penalty": 0.5,
        "presence_penalty": 0.5
    }

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥–æ–ª–≥–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
    async with httpx.AsyncClient(timeout=httpx.Timeout(10.0)) as client:
        try:
            response = await client.post(url, headers=headers, json=data)
            logger.debug(f"HTTP Response Status: {response.status_code}")
            logger.debug(f"HTTP Response Body: {response.text}")
            if response.status_code == 200:
                return response.json()
            else:
                logger.error(f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
                return None
        except httpx.RequestError as e:
            logger.error(f"HTTP –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –æ—à–∏–±–∫–æ–π: {e}")
            return None

@deepseek_router.message(Command("deepseek"))
async def activate_deepseek_mode(message: types.Message):
    """
    –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º DeepSeek –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = message.from_user.id
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.
    user_context[user_id] = [
        {
            "role": "system",
            "content": "–¢—ã –±–æ—Ç DeepSeek. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –æ—Ç–≤–µ—á–∞—è –Ω–∞ –∏—Ö –≤–æ–ø—Ä–æ—Å—ã."
        }
    ]
    await message.answer("üîÆ –†–µ–∂–∏–º DeepSeek –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã!")
from aiogram import F
@deepseek_router.message(F.text.exists() & ~F.text.startswith("/"))
async def handle_deepseek_question(message: types.Message):
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞: –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —Ç–µ–∫—Å—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "/" ‚Äî –≤—ã—Ö–æ–¥–∏–º.
    if message.text.startswith("/"):
        return

    user_id = message.from_user.id
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ä–µ–∂–∏–º DeepSeek, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user_id not in user_context:
        return

    try:
        user_message = message.text.strip()
        logger.info(f"–ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_message}")

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        conversation = user_context.get(user_id, [])
        conversation.append({"role": "user", "content": user_message})

        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π
        max_retries = 3
        for attempt in range(max_retries):
            response = await fetch_completion_with_context(conversation)
            logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –û—Ç–≤–µ—Ç –æ—Ç API: {response}")

            if response and "choices" in response and len(response["choices"]) > 0:
                content = response["choices"][0].get("message", {}).get("content", "").strip()
                if content:
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏
                    conversation.append({"role": "assistant", "content": content})
                    user_context[user_id] = conversation  # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
                    await message.answer(content)
                    return  # –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞

            logger.warning(f"–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –∏–∑ {max_retries}")

        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã
        await message.answer("ü§ñ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        await message.answer("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

