import logging
import asyncio
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from supabase import create_client
from config import SUPABASE_URL, SUPABASE_API_KEY
from utils import build_leaderboard_message

# –ü–æ–¥–∫–ª—é—á–∞–µ–º Supabase
supabase = create_client(SUPABASE_URL, SUPABASE_API_KEY)

leaderboard_router = Router()

class LeaderboardState(StatesGroup):
    waiting_for_quiz_selection = State()


@leaderboard_router.message(F.text == "üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞")
async def select_quiz_for_leaderboard(message: types.Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω –∏–∑ Supabase –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    try:
        response = await asyncio.to_thread(
            supabase.table("quizzes").select("id, title").execute
        )
        quizzes = response.data

        if not quizzes:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω.")
            return

        inline_keyboard = [
            [InlineKeyboardButton(text=quiz["title"], callback_data=f"leaderboard_{quiz['id']}")]
            for quiz in quizzes
        ]

        keyboard = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã:", reply_markup=keyboard)
        await state.set_state(LeaderboardState.waiting_for_quiz_selection)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@leaderboard_router.callback_query(
    F.data.startswith("leaderboard_"),
    StateFilter(LeaderboardState.waiting_for_quiz_selection)
)
async def show_leaderboard(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.
    """
    quiz_id = int(callback_query.data.split("_")[1])

    try:
        quiz_response = await asyncio.to_thread(
            supabase.table("quizzes").select("title").eq("id", quiz_id).single().execute
        )
        quiz = quiz_response.data

        if not quiz:
            await callback_query.message.answer("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –≤—Å–µ, –Ω–æ –≤—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ 10)
        result_response = await asyncio.to_thread(
            supabase.table("results")
            .select("user_id, score, time_taken")
            .eq("quiz_id", quiz_id)
            .order("score", desc=True)
            .order("time_taken", desc=False)
            .execute
        )
        results = result_response.data

        if not results:
            await callback_query.message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.")
            return

        top_10 = results[:10]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∞–º —Ç–µ–∫—Å—Ç –¢–æ–ø-10 —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é
        leaderboard_text = await build_leaderboard_message(top_10, supabase)

        quiz_title = quiz["title"]
        # –î–æ–±–∞–≤–ª—è–µ–º —à–∞–ø–∫—É
        final_text = f"üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã \"{quiz_title}\":\n{leaderboard_text}"

        await callback_query.message.answer(final_text)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã: {e}")
        await callback_query.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@leaderboard_router.message(F.text == "üåü –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥")
async def show_general_leaderboard(message: types.Message):
    try:
        # –í—ã–∑—ã–≤–∞–µ–º –≤–∞—à—É —Ö—Ä–∞–Ω–∏–º—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É get_total_scores
        # –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç [{"user_id":..., "total_score":..., "total_time":...}, ...]
        total_results_response = await asyncio.to_thread(
            supabase.rpc("get_total_scores").execute
        )
        results = total_results_response.data

        if not results:
            await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
            return

        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–∞—Ç—É "user_id", "score", "time_taken"
        # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –¢–û–ü-10
        top_10 = []
        for row in results[:10]:
            top_10.append({
                "user_id": row["user_id"],
                "score": int(row["total_score"]),
                "time_taken": int(row["total_time"])
            })

        # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        leaderboard_text = await build_leaderboard_message(top_10, supabase)

        # –î–æ–±–∞–≤–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ "üåü –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥:\n"
        final_text = f"üåü –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥:\n{leaderboard_text}"

        await message.answer(final_text)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")




