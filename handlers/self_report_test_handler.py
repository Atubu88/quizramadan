from aiogram import types, Router, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import json

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
with open("test_data.json", encoding="utf-8") as f:
    test_data = json.load(f)

test_router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ç–µ—Å—Ç–æ–≤
user_data = {}
test_ids = {str(i): test_name for i, test_name in enumerate(test_data.keys())}  # –ö–æ—Ä–æ—Ç–∫–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã


# –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–º
class SelfReportTestHandler:
    def __init__(self, test_name):
        self.test = test_data.get(test_name)
        self.current_question = 0
        self.total_score = 0
        self.num_questions = len(self.test['questions']) if self.test else 0

    def get_question(self):
        if self.current_question < self.num_questions:
            question_data = self.test['questions'][self.current_question]
            return question_data['question'], question_data['options']
        return None, None

    def submit_answer(self, selected_option):
        question_data = self.test['questions'][self.current_question]
        score = question_data['options'][selected_option].get('score', 0)
        self.total_score += score
        self.current_question += 1
        return score

    def is_finished(self):
        return self.current_question >= self.num_questions

    def get_result(self):
        max_score = sum(max(option['score'] for option in q['options']) for q in self.test['questions'])
        for result in self.test['results']:
            range_min, range_max = map(int, result['score_range'].split('‚Äì'))
            if range_min <= self.total_score <= range_max:
                return result['level'], result['description'], self.total_score, max_score
        return None, None, self.total_score, max_score


# –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ `callback_data`
@test_router.message(F.text == "üìù –¢–µ—Å—Ç –°–∞–º–æ–æ—Ü–µ–Ω–∫–∏")
async def show_tests_list(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ—Ä–æ—Ç–∫–∏—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=test_name, callback_data=f"start_test:{test_id}")]
                         for test_id, test_name in test_ids.items()]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:", reply_markup=keyboard)


# –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
@test_router.callback_query(F.data.startswith("start_test:"))
async def start_test(callback_query: types.CallbackQuery):
    test_id = callback_query.data.split(":")[1]  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Ç–µ—Å—Ç–∞
    test_name = test_ids.get(test_id)  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É

    handler = SelfReportTestHandler(test_name)

    # –ï—Å–ª–∏ —É —Ç–µ—Å—Ç–∞ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç–µ—Å—Ç–∞
    description = handler.test.get("description", "")
    intro_text = f"{test_name}\n\n{description}\n\n"

    question, options = handler.get_question()
    if question:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –ø–µ—Ä–≤—ã–º –≤–æ–ø—Ä–æ—Å–æ–º –∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –ø–æ—Å–ª–µ –æ–ø–∏—Å–∞–Ω–∏—è
        answer_text = f"{intro_text}{question}\n\n"
        answer_text += "\n".join([f"{i + 1}. {option['text']}" for i, option in enumerate(options)])

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=str(i + 1), callback_data=f"answer:{i}")]
                             for i in range(len(options))]  # –ö–∞–∂–¥–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–Ω–æ–ø–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º
        )
        await callback_query.message.edit_text(answer_text, reply_markup=keyboard)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º handler –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π user_data
    user_data[callback_query.from_user.id] = handler



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@test_router.callback_query(F.data.startswith("answer:"))
async def handle_answer(callback_query: types.CallbackQuery):
    handler = user_data.get(callback_query.from_user.id)

    if handler is None:
        await callback_query.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.")
        return

    try:
        selected_option = int(callback_query.data.split(":")[1])
        handler.submit_answer(selected_option)
    except (ValueError, IndexError):
        await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
        return

    if not handler.is_finished():
        question, options = handler.get_question()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –Ω–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–æ–º –∏ –æ—Ç–≤–µ—Ç–∞–º–∏
        answer_text = f"{question}\n\n"
        answer_text += "\n".join([f"{i + 1}. {option['text']}" for i, option in enumerate(options)])

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏-–Ω–æ–º–µ—Ä–∞–º–∏
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=str(i + 1), callback_data=f"answer:{i}")]
                             for i in range(len(options))]
        )
        await callback_query.message.edit_text(answer_text, reply_markup=keyboard)
    else:
        level, description, total_score, max_score = handler.get_result()
        result_text = (
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞:\n–£—Ä–æ–≤–µ–Ω—å: {level}\n{description}\n\n"
            f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {total_score} –∏–∑ {max_score} –±–∞–ª–ª–æ–≤."
        )
        await callback_query.message.edit_text(result_text)
        # –£–¥–∞–ª–µ–Ω–∏–µ handler –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
        del user_data[callback_query.from_user.id]

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ callback
    await callback_query.answer()
