import logging
import os
import asyncio
import time

from aiogram import Router, types, Bot, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramAPIError
from supabase import create_client
from dotenv import load_dotenv

from keyboards import quiz_list_keyboard
from utils import build_leaderboard_message

load_dotenv()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_API_KEY = os.getenv("SUPABASE_API_KEY")
supabase = create_client(SUPABASE_URL, SUPABASE_API_KEY)

quiz_router = Router()
logger = logging.getLogger(__name__)


class QuizState(StatesGroup):
    waiting_for_quiz_selection = State()
    answering_questions = State()


async def get_db_user_id_by_telegram_id(telegram_id: int):
    """
    –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (db_user_id) –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 'users'
    –ø–æ —Ä–µ–∞–ª—å–Ω–æ–º—É Telegram ID (telegram_id).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    try:
        response = await asyncio.to_thread(
            supabase.table("users")
            .select("id")
            .eq("telegram_id", telegram_id)
            .single()
            .execute
        )
        return response.data["id"] if response.data else None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è db_user_id: {e}")
        return None


async def get_quiz_by_id(quiz_id: int):
    """–ü–æ–ª—É—á–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –ø–æ ID —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏."""
    try:
        response = await asyncio.to_thread(
            supabase.table("quizzes")
            .select("id, title, questions(id, text, explanation, options(text, is_correct))")
            .eq("id", quiz_id)
            .single()
            .execute
        )
        return response.data if response.data else None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {e}")
        return None


@quiz_router.callback_query(F.data.startswith("quiz_"), StateFilter(QuizState.waiting_for_quiz_selection))
async def start_quiz(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.
    """
    try:
        quiz_id = int(callback_query.data.split("_")[1])
        telegram_id = callback_query.from_user.id

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase –ø–æ telegram_id
        db_user_id = await get_db_user_id_by_telegram_id(telegram_id)
        if not db_user_id:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram ID={telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Supabase.")
            await callback_query.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ /start –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë –≤ FSM
        quiz = await get_quiz_by_id(quiz_id)
        if not quiz:
            await callback_query.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        chat_id = callback_query.message.chat.id

        await state.update_data(
            quiz_id=quiz_id,
            chat_id=chat_id,
            telegram_id=telegram_id,  # —Ä–µ–∞–ª—å–Ω—ã–π Telegram ID
            db_user_id=db_user_id,    # –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –∏–∑ Supabase
            current_question_index=0,
            correct_answers=0,
            start_time=time.time(),
            quiz_finished=False,
            quiz=quiz  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —Ü–µ–ª–∏–∫–æ–º
        )
        await state.set_state(QuizState.answering_questions)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        await send_question(chat_id, state, callback_query.bot)

    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –≤ start_quiz: {e}")
        await callback_query.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()



@quiz_router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω")
async def list_quizzes(message: types.Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        keyboard = await quiz_list_keyboard()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É:", reply_markup=keyboard)
        await state.set_state(QuizState.waiting_for_quiz_selection)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ list_quizzes: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω.")


async def send_question(chat_id: int, state: FSMContext, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""
    try:
        data = await state.get_data()
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
        quiz = data.get("quiz")
        if not quiz or "questions" not in quiz:
            await bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.")
            return

        questions = quiz["questions"]
        current_index = data.get("current_question_index", 0)

        if current_index < len(questions):
            question = questions[current_index]
            options = question["options"]

            correct_index = next((i for i, opt in enumerate(options) if opt["is_correct"]), None)

            poll_message = await bot.send_poll(
                chat_id=chat_id,
                question=question["text"],
                options=[opt["text"] for opt in options],
                type="quiz",
                correct_option_id=correct_index,
                is_anonymous=False,
            )

            await state.update_data(poll_id=poll_message.poll.id)
        else:
            await finish_quiz(chat_id, state, bot)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_question: {e}")
        await bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞.")
        await state.clear()



@quiz_router.poll_answer()
async def handle_poll_answer(poll_answer: types.PollAnswer, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (quiz Poll)."""
    try:
        data = await state.get_data()
        chat_id = data.get("chat_id")
        quiz = data.get("quiz")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã

        if not chat_id or not quiz or "questions" not in quiz:
            logging.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞: chat_id –∏–ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ FSM.")
            return

        questions = quiz["questions"]
        current_question_index = data.get("current_question_index", 0)

        if current_question_index >= len(questions):
            await poll_answer.bot.send_message(chat_id, "‚ö†Ô∏è –í–æ–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç.")
            return

        question = questions[current_question_index]
        options = question["options"]

        if not poll_answer.option_ids:
            await poll_answer.bot.send_message(chat_id, "‚ö†Ô∏è –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç.")
            return

        selected_option_id = poll_answer.option_ids[0]
        selected_option = options[selected_option_id]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–µ—Ä–Ω–æ –ª–∏ –æ—Ç–≤–µ—á–µ–Ω–æ
        if selected_option["is_correct"]:
            correct_answers = data.get("correct_answers", 0) + 1
            await state.update_data(correct_answers=correct_answers)
            await poll_answer.bot.send_message(chat_id, "‚úÖ –í–µ—Ä–Ω–æ!")
        else:
            await poll_answer.bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.")

        # –í—ã–≤–æ–¥–∏–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        explanation = question.get("explanation")
        if explanation:
            await poll_answer.bot.send_message(chat_id, f"‚ÑπÔ∏è –ü–æ—è—Å–Ω–µ–Ω–∏–µ: {explanation}")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        await state.update_data(current_question_index=current_question_index + 1)

        if current_question_index + 1 >= len(questions):
            await finish_quiz(chat_id, state, poll_answer.bot)
        else:
            await send_question(chat_id, state, poll_answer.bot)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_poll_answer: {e}")
        if state:
            await state.clear()
        await poll_answer.bot.send_message(poll_answer.user.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞.")




async def finish_quiz(chat_id: int, state: FSMContext, bot: Bot):
    """üèÜ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏ –ø–æ–∫–∞–∑ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã."""
    try:
        data = await state.get_data()
        quiz_id = data["quiz_id"]
        db_user_id = data["db_user_id"]  # –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase
        correct_answers = data["correct_answers"]
        time_taken = int(time.time() - data["start_time"])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        existing_result = await asyncio.to_thread(
            supabase.table("results")
            .select("user_id, score, time_taken")
            .eq("user_id", db_user_id)
            .eq("quiz_id", quiz_id)
            .limit(1)
            .execute
        )

        if existing_result.data:
            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–æ–±—â–∞–µ–º
            await bot.send_message(chat_id, "–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —ç—Ç—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, –≤–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_data = {
                "user_id": db_user_id,
                "quiz_id": quiz_id,
                "score": correct_answers,
                "time_taken": time_taken
            }
            response = await asyncio.to_thread(
                supabase.table("results").insert(result_data).execute
            )
            if response.data is None:
                logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")
                await bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")
                return
            await bot.send_message(chat_id, "–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º *–≤—Å–µ* —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç—Ç–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
        leaderboard_response = await asyncio.to_thread(
            supabase.table("results")
            .select("user_id, score, time_taken")
            .eq("quiz_id", quiz_id)
            .order("score", desc=True)
            .order("time_taken", desc=False)
            .execute
        )
        leaderboard = leaderboard_response.data or []
        if not leaderboard:
            await bot.send_message(chat_id, "‚ö†Ô∏è –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞—è.")
            await state.clear()
            return

        total_participants = len(leaderboard)
        user_position = next((idx + 1 for idx, res in enumerate(leaderboard) if res["user_id"] == db_user_id), None)

        # –í–∞—à–µ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        result_message = (
            f"üèÜ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üîπ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {correct_answers} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n"
            f"üïí –í—Ä–µ–º—è: {time_taken} —Å–µ–∫\n"
            f"üìä –í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: {user_position}/{total_participants}"
        )
        await bot.send_message(chat_id, result_message)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¢–æ–ø-10 –∏ –≤—ã–≤–æ–¥–∏–º —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é
        top_results = leaderboard[:10]
        leaderboard_message = await build_leaderboard_message(top_results, supabase)
        await bot.send_message(chat_id, leaderboard_message)

        await state.clear()

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ finish_quiz: {e}")
        await bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.")
        await state.clear()

