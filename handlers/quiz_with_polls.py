import asyncio
import time
import os
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramAPIError
from supabase import create_client
from keyboards import start_keyboard

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_API_KEY = os.getenv("SUPABASE_API_KEY")
supabase = create_client(SUPABASE_URL, SUPABASE_API_KEY)

# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —Å –æ–ø—Ä–æ—Å–∞–º–∏
quiz_with_polls_router = Router()
sessions = {}

# –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–æ–ø—Ä–æ—Å–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
quiz_questions = [
    {
        "question": "1. –¢—ã —á–∏—Ç–∞–µ—à—å –ö–æ—Ä–∞–Ω 10 —Å—Ç—Ä–∞–Ω–∏—Ü –≤ —á–∞—Å. –¢—ã —É–¥–µ–ª–∏–ª 3 —á–∞—Å–∞, –Ω–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å —Å–∫–æ—Ä–æ—Å—Ç—å —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å –≤ 1.5 —Ä–∞–∑–∞. –°–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü —Ç—ã –ø—Ä–æ—á–∏—Ç–∞–ª?",
        "options": ["30", "35", "40"],
        "answer": "35",
        "explanation": "–¢—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ—Å—á–∏—Ç–∞–ª! –ü—Ä–æ—Ä–æ–∫ (Ô∑∫) —Å–∫–∞–∑–∞–ª: ¬´–ö—Ç–æ —á–∏—Ç–∞–µ—Ç –æ–¥–Ω—É –±—É–∫–≤—É –∏–∑ –ö–Ω–∏–≥–∏ –ê–ª–ª–∞—Ö–∞, —Ç–æ–º—É –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞–≥—Ä–∞–¥–∞, –∞ –Ω–∞–≥—Ä–∞–¥–∞ —É–º–Ω–æ–∂–∞–µ—Ç—Å—è –≤ 10 —Ä–∞–∑¬ª (–∞—Ç-–¢–∏—Ä–º–∏–∑–∏). –ü—Ä–µ–¥—Å—Ç–∞–≤—å, —Å–∫–æ–ª—å–∫–æ –Ω–∞–≥—Ä–∞–¥—ã —Ç—ã –ø–æ–ª—É—á–∏–ª –∑–∞ 35 —Å—Ç—Ä–∞–Ω–∏—Ü!"
    },
    # ... –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã ...
]

async def send_question_poll(chat_id: int, question_data: dict, bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ –≤–∏–¥–µ –æ–ø—Ä–æ—Å–∞."""
    options = question_data["options"]
    correct_option_id = options.index(question_data["answer"])

    poll_message = await bot.send_poll(
        chat_id=chat_id,
        question=question_data["question"],
        options=options,
        type="quiz",
        correct_option_id=correct_option_id,
        is_anonymous=False,
    )
    return poll_message

@quiz_with_polls_router.message(F.text == "üé≤ –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")
async def start_quiz_with_polls(message: Message):
    user_id = message.from_user.id
    if user_id in sessions and sessions[user_id]["active"]:
        await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –∏–≥—Ä–∞–µ—Ç–µ! –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π.")
        return

    sessions[user_id] = {
        "lives": 3,
        "question_index": 0,
        "score": 0,
        "waiting_future": None,
        "active": True,
        "start_time": time.time()  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
    }

    await message.answer("üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –£ –≤–∞—Å 3 üîã. –û—Ç–≤–µ—á–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —É—Ä–æ–≤–µ–Ω—å.")
    await quiz_game_loop(message)

async def quiz_game_loop(message: Message):
    user_id = message.from_user.id

    while user_id in sessions and sessions[user_id]["active"]:
        session = sessions.get(user_id)
        if not session:
            return

        if session["question_index"] >= len(quiz_questions):
            await message.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ —É—Ä–æ–≤–Ω–∏!")
            break

        current_question = quiz_questions[session["question_index"]]
        energy = "üîã" * session["lives"]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –≤–∏–¥–µ –æ–ø—Ä–æ—Å–∞
        poll_message = await send_question_poll(message.chat.id, current_question, message.bot)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ–ø—Ä–æ—Å–∞
        session["poll_id"] = poll_message.poll.id

        # –ñ–¥—ë–º –æ—Ç–≤–µ—Ç–∞ (–ª–∏–±–æ —Ç–∞–π–º–∞—É—Ç)
        try:
            user_answer = await asyncio.wait_for(session["waiting_future"], timeout=44)
        except asyncio.TimeoutError:
            user_answer = None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        correct_answer = current_question["answer"].strip().lower()
        if user_answer is None:
            session["lives"] -= 1
            if session["lives"] <= 0:
                await message.answer("‚è≥ –í—Ä–µ–º—è –≤—ã—à–ª–æ, –∏ —É —Ç–µ–±—è –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —ç–Ω–µ—Ä–≥–∏–∏.")
                break
            else:
                await message.answer("‚è≥ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        else:
            if user_answer.strip().lower() == correct_answer:
                await message.answer(
                    f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–π–¥–µ–Ω!\n\n"
                    f"{current_question['explanation']}"
                )
                session["score"] += 1
                session["question_index"] += 1
            else:
                session["lives"] -= 1
                if session["lives"] <= 0:
                    await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç–Ω–µ—Ä–≥–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å.")
                    break
                else:
                    await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    # –ü–æ–¥—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã
    elapsed_time = time.time() - sessions[user_id]["start_time"]
    minutes, seconds = divmod(int(elapsed_time), 60)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    first_name = message.from_user.first_name if message.from_user.first_name else ""
    username = message.from_user.username if message.from_user.username else ""
    display_name = first_name if first_name else (username if username else "–ê–Ω–æ–Ω–∏–º")

    score = session["score"]
    time_spent = int(elapsed_time)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    existing_record = supabase.table("quiz_results").select("id", "score", "time_spent").eq("user_id",
                                                                                                user_id).execute()

    if existing_record.data:
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
        supabase.table("quiz_results").update({
            "score": score,
            "time_spent": time_spent
        }).eq("user_id", user_id).execute()
    else:
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
        supabase.table("quiz_results").insert({
            "user_id": user_id,
            "username": display_name,
            "score": score,
            "time_spent": time_spent
        }).execute()

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
    result = supabase.table("quiz_results").select("user_id", "score").order("score", desc=True).execute()
    all_results = result.data
    total_players = len(all_results)
    position = next((i + 1 for i, res in enumerate(all_results) if res["user_id"] == user_id), "N/A")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await message.answer(
        f"üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üìä\n"
        f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π: {score}\n"
        f"‚è± –í—Ä–µ–º—è –∏–≥—Ä—ã: {minutes} –º–∏–Ω {seconds} —Å–µ–∫.\n"
        f"üèÜ –¢—ã –∑–∞–Ω—è–ª *{position}-–µ –º–µ—Å—Ç–æ* –∏–∑ {total_players} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!"
    )

    sessions.pop(user_id, None)

@quiz_with_polls_router.message()
async def handle_poll_answers(message: Message):
    user_id = message.from_user.id
    session = sessions.get(user_id)
    if session and session.get("waiting_future") and not session["waiting_future"].done():
        session["waiting_future"].set_result(message.text) 