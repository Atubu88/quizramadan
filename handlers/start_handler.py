import logging
import os
import asyncio
from aiogram import Router, types, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile, ReplyKeyboardMarkup, KeyboardButton
import asyncpg  # –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ PostgreSQL
from supabase import create_client

# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä
start_router = Router()

# –ü—É—Ç—å –¥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
MEDIA_PATH = os.path.join(os.getcwd(), "media", "welcome1.png")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Supabase —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_API_KEY = os.getenv("SUPABASE_API_KEY")
supabase = create_client(SUPABASE_URL, SUPABASE_API_KEY)


async def upsert_user_supabase(user_data: dict):
    """
    –ü–∏—à–µ–º (upsert) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É "users" Supabase
    –ø–æ –ø–æ–ª—é "telegram_id". –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ telegram_id UNIQUE.
    """
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º upsert, —É–∫–∞–∑—ã–≤–∞—è on_conflict="telegram_id"
        response = await asyncio.to_thread(
            supabase.table("users")
            .upsert(user_data, on_conflict="telegram_id")
            .execute
        )
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –æ—à–∏–±–∫–∏
        if response.data is None:
            # –ï—Å–ª–∏ data=None, –∑–Ω–∞—á–∏—Ç —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
            logging.error(
                f"–û—à–∏–±–∫–∞ upsert_user_supabase: status_code={response.status_code}, "
                f"error_message={response.error_message}"
            )
        else:
            logging.info(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['telegram_id']} ({user_data['username']}) "
                "—É—Å–ø–µ—à–Ω–æ upsert –≤ Supabase."
            )
    except Exception as e:
        logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ upsert_user_supabase: {e}")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å retry‚Äë–ª–æ–≥–∏–∫—É, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ


@start_router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start: —Å–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase,
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    user = message.from_user
    logging.info(f"üîπ /start –æ—Ç {user.id}")

    # –ì–æ—Ç–æ–≤–∏–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ Supabase
    user_data = {
        "telegram_id": user.id,
        "username": user.username or "",
        "first_name": user.first_name or "",
        "last_name": user.last_name or ""
    }

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ) –¥–µ–ª–∞–µ–º upsert –≤ Supabase
    asyncio.create_task(upsert_user_supabase(user_data))

    # –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω"), KeyboardButton(text="üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞")],
            [KeyboardButton(text="üåü –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥"),  KeyboardButton(text="üìù –¢–µ—Å—Ç –°–∞–º–æ–æ—Ü–µ–Ω–∫–∏")],
            [KeyboardButton(text="üî• –†–∞–º–∞–¥–∞–Ω –ö–≤–µ—Å—Ç")]
        ],
        resize_keyboard=True
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å)
    try:
        if os.path.exists(MEDIA_PATH):
            photo = FSInputFile(MEDIA_PATH)
            await message.answer_photo(
                photo,
                caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ\n–í—ã–±–µ—Ä–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ –Ω–∞—á–∏–Ω–∞–π –∏–≥—Ä–∞—Ç—å! üéÆ",
                reply_markup=keyboard
            )
        else:
            await message.answer(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏–∑ –º–µ–Ω—é üéÆ",
                reply_markup=keyboard
            )
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏–∑ –º–µ–Ω—é üéÆ",
            reply_markup=keyboard
        )


@start_router.message(Command("reset"))
async def cmd_reset(message: types.Message, state: FSMContext):
    """
    –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –∫–æ–º–∞–Ω–¥–æ–π /reset.
    """
    await state.clear()
    await message.answer("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /start")
